#!/usr/bin/env python3

mail = 'mathias.bockwoldt@uit.no' # Enter your email address here!

import sys
import os
import argparse
try:
	from taxfinder import TaxFinder
except ImportError:
	pass


parser = argparse.ArgumentParser(description='Makes multi-fasta file suitable for multiple sequence alignment from Blast result. Expects a blast result as single file XML2 format (must include taxid!) and needs internet connection.\nThe TaxFinder module might be very usefull although it is not necessary.')

parser.add_argument('xml', help='The Blast result as single file XML2 format (outfmt 16).')
parser.add_argument('-m', '--mail', help='Please state your (real!) email address. Alternatively, you can define the environment variable BLASTMAIL.')
parser.add_argument('-o', '--outfile', default='', help='Outfile name. Leave empty to write to stdout.')
parser.add_argument('-l', '--logfile', default='', help='Logfile name. Leave empty to write to stderr.')
parser.add_argument('-s', '--strip', action='store_true', help='If given, stop codons are stripped off.')
parser.add_argument('-e', '--evalue', type=float, default=1e-30, help='Evalue cutoff for including entries [1e-30]')
parser.add_argument('-t', '--title', type=int, default=0, help='Shorten the title of the entries to this length. Default is 0 (no shortening).')
parser.add_argument('-p', '--protein', action='store_true', help='If given, protein accessions instead of nucleotide accessions are assumed.')

args = parser.parse_args()

if args.logfile:
	logfile = open(args.logfile, 'w')
else:
	logfile = sys.stderr

if 'BLASTMAIL' in os.environ:
	mail = os.environ['BLASTMAIL']
if args.mail:
	mail = args.mail
if not mail:
	print('\033[1;31mPlease change your email address in the script before running or set it via -m or the environmental variable BLASTMAIL!\033[0;0m', file=logfile)
	sys.exit()

try:
	TF = TaxFinder()
except NameError:
	TF = None
	print('Taxfinder module not found. Script continues, but unifying subspecies will not work.', file=logfile)

entries = phylo.get_entries_from_blast_result(args.xml, args.evalue, TF)
if args.protein:
	fasta = phylo.download_protein_sequences(entries, mail=mail, title=args.title)
else:
	fasta = phylo.download_nucleotide_sequences(entries, mail=mail, title=args.title, strip=args.strip)

if args.outfile:
	open(args.outfile, 'w').write(fasta)
else:
	print(fasta)

if args.logfile:
	logfile.close()
